/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BLL.StudentBLL;
import BLL.TeacherBLL;
import BLL.UserBLL;
import DAL.UserDAL;
import DTO.StudentDTO;
import DTO.TeacherDTO;
import DTO.UserDTO;

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import static java.util.Collections.list;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTree;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;
import javax.swing.ImageIcon;

/**
 *
 * @author Admin
 */
public class Form_QLTK extends javax.swing.JFrame {
    
    DefaultTableModel dtm;
    String URL = "";
    List<UserDTO> userList = new ArrayList<>();
    /**
     * Creates new form Form_GV
     */
    public Form_QLTK() {
        initComponents();
        
        dtm = (DefaultTableModel) tblUser.getModel();
        
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }
    private void showUser() {
        userList =  UserBLL.getAll();
        dtm.setRowCount(0);
        userList.forEach((UserDTO) -> {
            dtm.addRow(new Object[] {UserDTO.getUserID(),UserDTO.getUserName(), UserDTO.getPassword(),UserDTO.getRole()});
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnThem = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnTimkiem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXem = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtId.setText("Trường này được tự động điền ID");
        txtId.setEditable(false);
        txtId.setForeground(Color.RED);
        jLabel5 = new javax.swing.JLabel();
        btnXuatExcel = new javax.swing.JButton();
        cbRole = new javax.swing.JComboBox<>();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FORM_QLTK");

        jPanel1.setBackground(new java.awt.Color(255, 255, 0));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Username:");

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Password:");

        txtPassword.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Role:");

        btnThem.setBackground(new java.awt.Color(0, 153, 0));
        btnThem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconadd.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnReset.setBackground(new java.awt.Color(0, 153, 0));
        btnReset.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconreset.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnXoa.setBackground(new java.awt.Color(0, 153, 0));
        btnXoa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnXoa.setForeground(new java.awt.Color(255, 255, 255));
        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icondelete.png"))); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnTimkiem.setBackground(new java.awt.Color(0, 153, 0));
        btnTimkiem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnTimkiem.setForeground(new java.awt.Color(255, 255, 255));
        btnTimkiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconsearch.png"))); // NOI18N
        btnTimkiem.setText("Tìm kiếm");
        btnTimkiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimkiemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(0, 153, 0));
        btnSua.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconedit.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXem.setBackground(new java.awt.Color(0, 153, 0));
        btnXem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnXem.setForeground(new java.awt.Color(255, 255, 255));
        btnXem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconlist.png"))); // NOI18N
        btnXem.setText("Xem danh sách");
        btnXem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemActionPerformed(evt);
            }
        });

        tblUser.setModel(new DefaultTableModel(
        	new Object[][] {
        		{null, null, null, null},
        		{null, null, null, null},
        		{null, null, null, null},
        		{null, null, null, null},
        	},
        	new String[] {
        		"ID", "Username", "Password", "Role"
        	}
        ) {
        	boolean[] columnEditables = new boolean[] {
        		false, false, false, false
        	};
        	public boolean isCellEditable(int row, int column) {
        		return columnEditables[column];
        	}
        });
        tblUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUserMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblUser);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("ID:");

        txtId.setFont(new Font("Tahoma", Font.ITALIC, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("QUẢN LÝ TÀI KHOẢN");

        btnXuatExcel.setBackground(new java.awt.Color(0, 153, 0));
        btnXuatExcel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnXuatExcel.setForeground(new java.awt.Color(255, 255, 255));
        btnXuatExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/iconexcel.png"))); // NOI18N
        btnXuatExcel.setText("Xuất Excel");
        btnXuatExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelActionPerformed(evt);
            }
        });

        cbRole.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AD", "HS", "GV" }));
        cbRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRoleActionPerformed(evt);
            }
        });
//        String URL = "";
        btnNhapExcel = new JButton();
        btnNhapExcel.setIcon(new ImageIcon(Form_QLTK.class.getResource("/Images/iconexcel.png")));
        btnNhapExcel.setText("Nhập Excel");
        btnNhapExcel.setForeground(Color.WHITE);
        btnNhapExcel.setFont(new Font("Tahoma", Font.BOLD, 14));
        btnNhapExcel.setBackground(new Color(0, 153, 0));
        btnNhapExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnNhapExcelActionPerformed(evt);
            }
            
        });
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(232)
        					.addComponent(jLabel5))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(10)
        					.addComponent(btnXem)
        					.addGap(18)
        					.addComponent(btnXuatExcel, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(btnNhapExcel, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(btnReset, GroupLayout.PREFERRED_SIZE, 160, GroupLayout.PREFERRED_SIZE))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(10)
        					.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 657, GroupLayout.PREFERRED_SIZE)
        					.addGap(6)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(btnThem, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnXoa, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
        						.addComponent(btnSua, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(10)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel2)
        						.addComponent(jLabel3))
        					.addGap(47)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(cbRole, GroupLayout.PREFERRED_SIZE, 56, GroupLayout.PREFERRED_SIZE)
        						.addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, 530, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(10)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE)
        						.addComponent(jLabel4))
        					.addGap(1)
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING, false)
        						.addComponent(txtUsername, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        						.addComponent(txtId, Alignment.TRAILING))
        					.addGap(23)
        					.addComponent(btnTimkiem, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)))
        			.addGap(10))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(29)
        			.addComponent(jLabel5)
        			.addGap(34)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(3)
        					.addComponent(jLabel4))
        				.addComponent(btnTimkiem, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtId, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(5)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(4)
        					.addComponent(jLabel1))
        				.addComponent(txtUsername, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(25)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(txtPassword, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(15)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel3)
        				.addComponent(cbRole, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(15)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(btnXem, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnXuatExcel, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
        				.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(btnReset, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)
        					.addComponent(btnNhapExcel, GroupLayout.PREFERRED_SIZE, 44, GroupLayout.PREFERRED_SIZE)))
        			.addGap(18)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 146, GroupLayout.PREFERRED_SIZE)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addComponent(btnThem, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE)
        					.addGap(6)
        					.addComponent(btnXoa, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)
        					.addGap(11)
        					.addComponent(btnSua, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int temp = 0;
    public static String UserID = "";
    UserBLL userBLL = new UserBLL();
    public  String createID(int dem_HS, int dem_GV, int dem_AD) {
 //  dem_HS = 0;  dem_GV = 0;  dem_AD = 0;
    	String role = String.valueOf(cbRole.getSelectedItem());
    	if(role.equals("HS")) {
    		dem_HS = userBLL.getUserByRoleHS(dem_HS) + 1;
    		UserID = role + String.valueOf(dem_HS);
    	}
    	else {
    		if(role.equals("GV")) {
	    		dem_GV = userBLL.getUserByRoleGV(dem_GV) + 1;
	    		UserID = role   + String.valueOf(dem_GV);
	    	}
    		else {
		    	if(role.equals("AD")) {
		    		dem_AD = userBLL.getUserByRoleAD(dem_AD) + 1;
		    		UserID = role  + String.valueOf(dem_AD);
		    	}
    		}
    	}
    	return UserID;
    }
    public String checkID(String id) {
    	if(!userBLL.checkExistID(id)) {
    		String[] c = id.split(""); 
    		
    		String role = c[0] + c[1];
    		String a ="";
    		int b = 0;
    		
    		for(int i = 2; i < id.length(); i++) {
    			a = c[i] + a;
    		}
    		b = Integer.valueOf(a) + 1;
    		if(role.equals("HS")) {
    			id = "HS" + String.valueOf(b);
    			return id;
    		}
    		if(role.equals("GV")) {
    			id = "GV" + String.valueOf(b);
    			return id;
    		}
    		if(role.equals("AD")) {
    			id = "AD" + String.valueOf(b);
    			return id;
    		}
    		
       	}
    	else
    		return id;
    	return id;
    }
    private void btnNhapExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNhapExcelActionPerformed
        // TODO add your handling code here:
            int option = JOptionPane.showConfirmDialog(this, "Hãy chọn tệp !");
            if(option == 0) {
            	JTreeEvent tree = new JTreeEvent();
            	tree.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            	tree.setSize(500, 500);
            	tree.setVisible(true);
            	tree.btnOK.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						// TODO Auto-generated method stub
						URL = tree.URL;
						tree.setVisible(false);
						JOptionPane.showMessageDialog(null,"Chọn thành công","Thông báo", JOptionPane.INFORMATION_MESSAGE);
						XSSFWorkbook workbook;
						FileInputStream inputStream;
						try {
							inputStream = new FileInputStream(new File(URL));
							workbook = new  XSSFWorkbook(inputStream);
							XSSFSheet sheet = workbook.getSheetAt(0);
							Iterator<Row> rowIterator = sheet.iterator();
							String pass = null;
						       while (rowIterator.hasNext()) {
						    	   String getUser = "";
						    	   String none = "";
						    	   String ps = "";
						           Row row = rowIterator.next();
						           // Lấy Iterator cho tất cả các cell của dòng hiện tại.
						           Iterator<Cell> cellIterator = row.cellIterator();
						           while (cellIterator.hasNext()) {
						               Cell cell = cellIterator.next();
						               // Đổi thành getCellType() nếu sử dụng POI 4.x
						               CellType cellType = cell.getCellTypeEnum();
						               switch (cellType) {
						               case _NONE:
//						                   System.out.print("");
						                   none = none + "";
//						                   System.out.print("\t");
						                   break;
						               case BOOLEAN:
						                   System.out.print(cell.getBooleanCellValue());
						                   System.out.print("\t");
						                   break;
						               case BLANK:
//						                   System.out.print("");
//						                   System.out.print("\t");
						                   break;
						               case FORMULA:
						                   // Công thức
						                   System.out.print(cell.getCellFormula());
						                   System.out.print("\t");
						                   FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
						                   // In ra giá trị từ công thức
						                   System.out.print(evaluator.evaluate(cell).getNumberValue());
						                   break;
						               case NUMERIC:
//						                   System.out.print(cell.getNumericCellValue()+"pass");//in ra password nếu pass là dạng dãy số
						                   int a = (int) cell.getNumericCellValue();
						                   ps = ps + String.valueOf(a) + " ";
						                   pass = String.valueOf(a);
						                   break;
						               case STRING:
//						                   System.out.print(cell.getStringCellValue()+"role");//in ra userName, role, và password nếu password là dạng chuỗi
						            	   getUser = getUser + cell.getStringCellValue() + "///";
						                   break;
						               case ERROR:
						                   System.out.print("!");
						                   System.out.print("\t");
						                   break;
						               }
						           }//vòng while get cell
						           String[] user = getUser.split("///");
						           String setRole = null;
						           String newID = null;
				                   if(user[0].equals("UserName") && user[1].equals("Password") && user[2].equals("Role")&&
				                		   user[3].equals("Họ tên") && user[4].equals("Ngày sinh") && user[5].equals("Giới tính") && user[6].equals("Địa chỉ")&&
						        		   user[7].equals("Lớp") && user[8].equals("Niên khóa") && user[9].equals("Số điện thoại") && user[10].equals("Email")) {
				                	   
				                   }
				                   else {
				                	   try {
											txtUsername.setText(user[0]);
											txtPassword.setText(user[1]);
											setRole = user[2];
											cbRole.setSelectedItem(setRole);
											int dem_HS = 0; int dem_GV = 0; int dem_AD = 0;
											String Id = createID(dem_HS, dem_GV, dem_AD);
											String Username = txtUsername.getText();
											String Password = txtPassword.getText();
											String Role = cbRole.getSelectedItem().toString();
											newID = checkID(Id);
											while(!userBLL.checkExistID(newID)) {
												 newID = checkID(newID);
											}
											txtId.setText(newID);
											UserDTO userDTO = new UserDTO(newID, Username, Password, Role);
											UserBLL.insert(userDTO);
											showUser();
											if(setRole.equals("HS")) {
												String Hoten = user[3];
												String Ngaysinh = user[4];
												String Gioitinh = user[5];
												String Diachi = user[6];
												String Lop = user[7];
												String Nienkhoa = user[8];
												String SDT = user[9];
												String Email = user[10];
											
												StudentDTO std = new StudentDTO(newID, Hoten, Ngaysinh, Gioitinh, Diachi, Lop, Nienkhoa, SDT, Email);
												StudentBLL.insert(std);
											}else {
												if(setRole.equals("GV")) {
													String Hoten = user[3];
													String Ngaysinh = user[4];
													String Gioitinh = user[5];
													String Diachi = user[6];
													String Lop = user[7];
													String Nienkhoa = user[8];
													String SDT = user[9];
													String Email = user[10];
													
													TeacherDTO teacher = new TeacherDTO(newID, Hoten, Ngaysinh, Gioitinh, Diachi, Lop, Nienkhoa, SDT, Email);
													TeacherBLL.insert(teacher);
												}else
													if(setRole.equals("AD"));
											}
										} catch (Exception e2) {
											// TODO: handle exception
											JOptionPane.showMessageDialog(null, "Lỗi từ file Excel Import_Users", "Lỗi",JOptionPane.ERROR_MESSAGE);
											//System.out.println(ERROR);
										}
						           }
						       }//vòng while get row
						} catch (FileNotFoundException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						JOptionPane.showMessageDialog(null, "Nhập Excel thành công", "Thông báo",JOptionPane.INFORMATION_MESSAGE);
					}
					
				});
            		
            	
            }
        
    }
    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        // TODO add your handling code here:
    	int dem_HS = 0; int dem_GV = 0; int dem_AD = 0;
        String Id = createID(dem_HS, dem_GV, dem_AD);
       
        String Username = txtUsername.getText();
        String Password = txtPassword.getText();
        String Role = cbRole.getSelectedItem().toString();
		String a = checkID(Id);
		while(!userBLL.checkExistID(a)) {
			a = checkID(a);
		}
		txtId.setText(a);
		
        try {
        	
        	if(Username.length() == 0 || Password.length() == 0 || Role.length() == 0){
                JOptionPane.showMessageDialog(null, "Vui lòng điền đủ thông tin", "Thông báo",1);
        }
        else {
            String rgusername = "^[a-zA-Z0-9]{3,}$";
            if(!Username.matches(rgusername)) {
                JOptionPane.showMessageDialog(this, "Username gồm chữ hoặc số, độ dài hơn 3 ký tự");
            }
            else {
                if(!userBLL.checkExistUserName(Username)) {
                    JOptionPane.showMessageDialog(null, "Tên tài khoản đã tồn tại. Hãy nhập lại! ", "Thông báo",1);

                }
                else {
                    UserID = a;
                    UserDTO user = new UserDTO(a, Username, Password, Role);
                    UserBLL.insert(user);
                    JOptionPane.showMessageDialog(this, "Thêm thành công");
                    showUser(); 
                    if(cbRole.getSelectedItem().toString().equalsIgnoreCase("HS")) {
                            Form_AddHS addhs = new Form_AddHS();
                            addhs.setVisible(true);
                    }
                    if(cbRole.getSelectedItem().toString().equalsIgnoreCase("GV")){
                            Form_AddGV addgv = new Form_AddGV();
                            addgv.setVisible(true);
                    }
                }
            }              
        }
		} catch (Exception  e) {
			// TODO: handle exception

		}
        
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        txtId.setText("Trường này được tự động điền ID");
        txtUsername.setText("");
        txtUsername.setEditable(true);
        txtPassword.setText("");
        cbRole.setSelectedIndex(0); 
        
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        int selectedIndex = tblUser.getSelectedRow();
        if(selectedIndex >= 0) {
            UserDTO user = userList.get(selectedIndex);
            
            int option = JOptionPane.showConfirmDialog(this, "Bạn có muốn xóa?");
            if(option == 0) {
                UserBLL.delete(user.getUserID());
                JOptionPane.showMessageDialog(this, "Xóa thành công");
                showUser();                              
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnTimkiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimkiemActionPerformed
        // TODO add your handling code here: 
    	String role = JOptionPane.showInputDialog(this, "Nhập Role cần tìm");
        String id = JOptionPane.showInputDialog(this, "Nhập ID cần tìm");
       
        if(id != null && id.length() > 0) {
            userList = (ArrayList<UserDTO>) UserBLL.findByID(id);
            
            dtm.setRowCount(0);
        
            userList.forEach((UserDTO) -> {
                dtm.addRow(new Object[] {UserDTO.getUserID(), UserDTO.getUserName(), UserDTO.getPassword(), UserDTO.getRole()});
            });
        } else {
            if(role != null && role.length() > 0) {
            	userList = (ArrayList<UserDTO>) UserBLL.findByRole(role);
                
                dtm.setRowCount(0);
            
                userList.forEach((UserDTO) -> {
                    dtm.addRow(new Object[] {UserDTO.getUserID(), UserDTO.getUserName(), UserDTO.getPassword(), UserDTO.getRole()});
                });
            }
        }
    }//GEN-LAST:event_btnTimkiemActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        String Id = txtId.getText();
        String Username = txtUsername.getText();
        String Password = txtPassword.getText();
      
        if(Password.equals(" ") || Password.isEmpty()){
            JOptionPane.showMessageDialog(null, "Vui lòng điền đủ thông tin", "Thông báo",1);
        }
        else {
        			UserDTO user = new UserDTO(Id,Username, Password, roleExits);
        			UserBLL.update(user);
        			JOptionPane.showMessageDialog(this, "Sửa thành công");
        			showUser();
        }
                                                 
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemActionPerformed
        // TODO add your handling code here:
        showUser();
    }//GEN-LAST:event_btnXemActionPerformed
    String roleExits;
    private void tblUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUserMouseClicked
        // TODO add your handling code here:
        int selectedIndex = tblUser.getSelectedRow();
        UserDTO user = userList.get(selectedIndex); 
        txtId.setText(user.getUserID());
        txtUsername.setText(user.getUserName());
        txtUsername.setEditable(false);
        txtPassword.setText(user.getPassword());
        cbRole.setEditable(false);
        cbRole.setSelectedItem(user.getRole());
        roleExits = cbRole.getSelectedItem().toString();
    }//GEN-LAST:event_tblUserMouseClicked

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void btnXuatExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelActionPerformed
        // TODO add your handling code here:
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("DANH SÁCH TÀI KHOẢN");

            XSSFRow row = null;
            Cell cell = null;

            row = spreadsheet.createRow((short) 0);          
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("DANH SÁCH TÀI KHOẢN");

            row = spreadsheet.createRow((short) 1);           
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("ID");
            
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Username");
            
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Password");
            
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Role");  
            
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Họ tên");
            
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Ngày sinh");
            
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Giới tính");
            
            cell = row.createCell(7, CellType.STRING);
            cell.setCellValue("Địa chỉ");
            
            cell = row.createCell(8, CellType.STRING);
            cell.setCellValue("Lớp");
            
            cell = row.createCell(9, CellType.STRING);
            cell.setCellValue("Niên khóa");
            
            cell = row.createCell(10, CellType.STRING);
            cell.setCellValue("Số điện thoại");
            
            cell = row.createCell(11, CellType.STRING);
            cell.setCellValue("Email");
            
            

            UserBLL userBLL = new UserBLL();
            StudentBLL studentBLL = new StudentBLL();
            List<UserDTO> listUser = userBLL.getAll();
            List<StudentDTO> listStudent = studentBLL.getAll();
            List<TeacherDTO> listTeacher = TeacherBLL.getAll();
            int t = listStudent.size();
            int demHS = 1;
            int demGV = 1;
            int k;
            int j;
            for (int i = 0; i < listUser.size(); i++) {
                UserDTO userDTO = listUser.get(i);
                row = spreadsheet.createRow((short) 2 + i);
                row.setHeight((short) 400);
                row.createCell(0).setCellValue(userDTO.getUserID());
                row.createCell(1).setCellValue(userDTO.getUserName());
                row.createCell(2).setCellValue(userDTO.getPassword());
                row.createCell(3).setCellValue(userDTO.getRole());   
                if(userDTO.getRole().equals("HS")) {
                	if(demHS <= t) {
                			for(j = 0; j < demHS; j++) {
               		
	                		StudentDTO stu = listStudent.get(j);
	                		row.createCell(4).setCellValue(stu.getHoten());
	                		row.createCell(5).setCellValue(stu.getNgaysinh());
	                		row.createCell(6).setCellValue(stu.getGioitinh());
	                		row.createCell(7).setCellValue(stu.getDiachi());
	                		row.createCell(8).setCellValue(stu.getLop());
	                		row.createCell(9).setCellValue(stu.getNienKhoa());
	                		row.createCell(10).setCellValue(stu.getSDT());
	                		row.createCell(11).setCellValue(stu.getEmail());
	//                		break;
                			}
                	}
                	demHS ++;
                	
                }
                else {
                	if(userDTO.getRole().equals("GV")) {
                		if(demGV <= listTeacher.size()) {
                			for(k = 0 ; k < demGV; k++) {
	                			TeacherDTO teacher = listTeacher.get(k);
	                    		row.createCell(4).setCellValue(teacher.getHoten());
	                    		row.createCell(5).setCellValue(teacher.getNgaysinh());
	                    		row.createCell(6).setCellValue(teacher.getGioitinh());
	                    		row.createCell(7).setCellValue(teacher.getDiaChi());
	                    		row.createCell(8).setCellValue(teacher.getLop());
	                    		row.createCell(9).setCellValue(teacher.getNienKhoa());
	                    		row.createCell(10).setCellValue(teacher.getSDT());
	                    		row.createCell(11).setCellValue(teacher.getEmail());
                			}
                		}
                		demGV++;
                	}
                	
                }
            }
            

            FileOutputStream out = new FileOutputStream(new File("D:/Export_Userlist.xlsx"));
            workbook.write(out);
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        JOptionPane.showMessageDialog(this, "Xuất excel thành công");
    }//GEN-LAST:event_btnXuatExcelActionPerformed

    private void cbRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRoleActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimkiem;
    private javax.swing.JButton btnXem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXuatExcel;
    private javax.swing.JComboBox<String> cbRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextField txtPassword;
    public static javax.swing.JTextField txtUsername;
    public static javax.swing.JTextField txtId;
    private JButton btnNhapExcel;
}
